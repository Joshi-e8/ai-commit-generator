#!/usr/bin/env node
/**
 * Pure Node.js Smart Commits AI CLI
 * No Python dependency required
 */

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');
const AIClient = require('../lib/ai-client');

// ANSI color codes
const colors = {
    blue: '\x1b[34m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    red: '\x1b[31m',
    reset: '\x1b[0m',
    bold: '\x1b[1m'
};

function printHeader() {
    console.log('‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ');
    console.log('‚îÇ ü§ñ AI Commit Message Generator                                                                                                                ‚îÇ');
    console.log('‚îÇ Automatically generate conventional commit messages using AI                                                                                  ‚îÇ');
    console.log('‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ');
}

function printStatus(message, type = 'info') {
    const icons = {
        info: 'üîß',
        success: '‚úÖ',
        warning: '‚ö†Ô∏è',
        error: '‚ùå'
    };

    const color = type === 'success' ? colors.green :
                  type === 'warning' ? colors.yellow :
                  type === 'error' ? colors.red : colors.blue;

    console.log(`${color}${icons[type]} ${message}${colors.reset}`);
}

async function installGitHook(force = false) {
    printHeader();
    printStatus('Installing AI commit generator...');

    const gitDir = path.join(process.cwd(), '.git');
    if (!fs.existsSync(gitDir)) {
        printStatus('Not a git repository. Please run this command in a git repository.', 'error');
        process.exit(1);
    }

    const hooksDir = path.join(gitDir, 'hooks');
    if (!fs.existsSync(hooksDir)) {
        fs.mkdirSync(hooksDir, { recursive: true });
    }

    const hookPath = path.join(hooksDir, 'prepare-commit-msg');

    if (fs.existsSync(hookPath) && !force) {
        const content = fs.readFileSync(hookPath, 'utf8');
        if (!content.includes('smart-commits-ai')) {
            printStatus('Git hook already exists but is not from smart-commits-ai', 'warning');
            printStatus('Use --force to overwrite', 'info');
            process.exit(1);
        }
    }

    const hookContent = `#!/bin/bash
# Smart Commits AI Git Hook
# This hook was automatically generated by smart-commits-ai

set -e

# Exit if this is a merge commit
if [[ "$2" == "merge" ]]; then
    exit 0
fi

# Run the Node.js CLI
if command -v node &> /dev/null; then
    if command -v smart-commits-ai &> /dev/null; then
        smart-commits-ai generate --output "$1"
        exit 0
    fi
fi

# If we get here, the package is not available
echo "Error: smart-commits-ai command not found"
echo "Please ensure the package is installed: npm install smart-commits-ai"
exit 1
`;

    fs.writeFileSync(hookPath, hookContent);
    fs.chmodSync(hookPath, 0o755);

    printStatus('Git hook installed successfully', 'success');

    console.log('\nüìã Next Steps:');
    console.log('1. Get an API key from one of these providers:');
    console.log('   ‚Ä¢ Groq (recommended): https://console.groq.com/keys');
    console.log('   ‚Ä¢ OpenRouter: https://openrouter.ai/keys');
    console.log('   ‚Ä¢ Cohere: https://dashboard.cohere.ai/api-keys');
    console.log('\n2. Add your API key to .env:');
    console.log("   echo 'GROQ_API_KEY=your_key_here' >> .env");
    console.log('\n3. Test the installation:');
    console.log('   echo \'test\' > test.txt && git add test.txt && git commit');
    console.log('\nüöÄ Your commits will now be automatically enhanced with AI!');
}

async function generateCommitMessage(outputFile = null, dryRun = false) {
    try {
        const client = new AIClient();
        const message = await client.generateCommitMessage();

        if (dryRun) {
            console.log(`${colors.green}‚úÖ Generated message:${colors.reset} ${colors.blue}${message}${colors.reset}`);
            console.log(`${colors.yellow}Note: This was a dry run. No files were modified.${colors.reset}`);
        } else if (outputFile) {
            fs.writeFileSync(outputFile, message);
            console.log(`${colors.green}‚úÖ Generated message:${colors.reset} ${colors.blue}${message}${colors.reset}`);
        } else {
            console.log(message);
        }
    } catch (error) {
        console.error(`${colors.red}‚ùå Failed to generate commit message:${colors.reset} ${error.message}`);
        process.exit(1);
    }
}

function showVersion() {
    const packagePath = path.join(__dirname, '..', 'package.json');
    const packageInfo = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    console.log(`smart-commits-ai ${packageInfo.version}`);
}

function showHelp() {
    console.log('Smart Commits AI - Pure Node.js Version');
    console.log('');
    console.log('Usage:');
    console.log('  smart-commits-ai install [--force]     Install Git hook');
    console.log('  smart-commits-ai generate [options]    Generate commit message');
    console.log('  smart-commits-ai --version              Show version');
    console.log('  smart-commits-ai --help                 Show this help');
    console.log('');
    console.log('Generate Options:');
    console.log('  --output, -o <file>    Write message to file');
    console.log('  --dry-run              Generate message without writing to file');
    console.log('');
    console.log('Environment Variables:');
    console.log('  GROQ_API_KEY          Groq API key (recommended)');
    console.log('  OPENROUTER_API_KEY    OpenRouter API key');
    console.log('  COHERE_API_KEY        Cohere API key');
}

// Main CLI logic
async function main() {
    const args = process.argv.slice(2);

    if (args.length === 0 || args.includes('--help') || args.includes('-h')) {
        showHelp();
        return;
    }

    if (args.includes('--version') || args.includes('-v')) {
        showVersion();
        return;
    }

    const command = args[0];

    switch (command) {
        case 'install':
            const force = args.includes('--force');
            await installGitHook(force);
            break;

        case 'generate':
            const outputIndex = args.findIndex(arg => arg === '--output' || arg === '-o');
            const outputFile = outputIndex !== -1 && args[outputIndex + 1] ? args[outputIndex + 1] : null;
            const dryRun = args.includes('--dry-run');
            await generateCommitMessage(outputFile, dryRun);
            break;

        default:
            console.error(`Unknown command: ${command}`);
            showHelp();
            process.exit(1);
    }
}

// Run the CLI
main().catch(error => {
    console.error(`${colors.red}‚ùå Error:${colors.reset} ${error.message}`);
    process.exit(1);
});

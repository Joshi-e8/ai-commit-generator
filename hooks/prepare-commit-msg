#!/bin/bash

# AI-Powered Git Commit Message Generator
# This hook generates conventional commit messages using AI APIs

set -e

# Exit if this is a merge commit
if [[ "$2" == "merge" ]]; then
    exit 0
fi

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(git rev-parse --show-toplevel)"
CONFIG_FILE="$REPO_ROOT/.commitgen.yml"
ENV_FILE="$REPO_ROOT/.env"
LOG_FILE="$REPO_ROOT/.commitgen.log"

# Default configuration
DEFAULT_PROVIDER="groq"
DEFAULT_MODEL="llama3-70b-8192"
DEFAULT_MAX_CHARS="72"
DEFAULT_MAX_DIFF_SIZE="8000"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    if [[ "${DEBUG_ENABLED:-false}" == "true" ]]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
    fi
}

# Error handling
error_exit() {
    echo -e "${RED}Error: $1${NC}" >&2
    log "ERROR: $1"
    exit 1
}

# Load environment variables
load_env() {
    if [[ -f "$ENV_FILE" ]]; then
        set -a
        source "$ENV_FILE"
        set +a
        log "Loaded environment from $ENV_FILE"
    fi
}

# Parse YAML configuration (simple parser for our needs)
parse_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log "No config file found, using defaults"
        PROVIDER="$DEFAULT_PROVIDER"
        MAX_CHARS="$DEFAULT_MAX_CHARS"
        MAX_DIFF_SIZE="$DEFAULT_MAX_DIFF_SIZE"
        DEBUG_ENABLED="false"
        return
    fi
    
    # Extract values using grep and sed with better parsing
    PROVIDER=$(grep -A 10 "^api:" "$CONFIG_FILE" | grep -E "^\s*provider:" | head -1 | sed 's/.*provider:\s*//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//' | tr -d '"')
    if [[ -z "$PROVIDER" ]]; then
        PROVIDER="$DEFAULT_PROVIDER"
    fi
    
    MAX_CHARS=$(grep -A 10 "^commit:" "$CONFIG_FILE" | grep -E "^\s*max_chars:" | head -1 | sed 's/.*max_chars:\s*//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
    if [[ -z "$MAX_CHARS" ]]; then
        MAX_CHARS="$DEFAULT_MAX_CHARS"
    fi
    
    MAX_DIFF_SIZE=$(grep -A 10 "^processing:" "$CONFIG_FILE" | grep -E "^\s*max_diff_size:" | head -1 | sed 's/.*max_diff_size:\s*//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
    if [[ -z "$MAX_DIFF_SIZE" ]]; then
        MAX_DIFF_SIZE="$DEFAULT_MAX_DIFF_SIZE"
    fi
    
    DEBUG_ENABLED=$(grep -A 10 "^debug:" "$CONFIG_FILE" | grep -E "^\s*enabled:" | head -1 | sed 's/.*enabled:\s*//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//' | tr -d '"')
    if [[ -z "$DEBUG_ENABLED" ]]; then
        DEBUG_ENABLED="false"
    fi
    
    log "Config loaded: provider='$PROVIDER', max_chars='$MAX_CHARS', max_diff_size='$MAX_DIFF_SIZE', debug='$DEBUG_ENABLED'"
}

# Get model for provider
get_model() {
    case "$PROVIDER" in
        "groq")
            echo "${GROQ_MODEL:-$DEFAULT_MODEL}"
            ;;
        "openrouter")
            echo "${OPENROUTER_MODEL:-meta-llama/llama-3.1-70b-instruct}"
            ;;
        "cohere")
            echo "${COHERE_MODEL:-command-r-plus}"
            ;;
        *)
            echo "$DEFAULT_MODEL"
            ;;
    esac
}

# Get API endpoint and headers
get_api_config() {
    log "Getting API config for provider: '$PROVIDER'"
    
    case "$PROVIDER" in
        "groq")
            API_URL="https://api.groq.com/openai/v1/chat/completions"
            API_KEY="${GROQ_API_KEY}"
            AUTH_HEADER="Authorization: Bearer $API_KEY"
            ;;
        "openrouter")
            API_URL="https://openrouter.ai/api/v1/chat/completions"
            API_KEY="${OPENROUTER_API_KEY}"
            AUTH_HEADER="Authorization: Bearer $API_KEY"
            ;;
        "cohere")
            API_URL="https://api.cohere.ai/v1/chat"
            API_KEY="${COHERE_API_KEY}"
            AUTH_HEADER="Authorization: Bearer $API_KEY"
            ;;
        *)
            echo -e "${RED}Error: Unsupported provider: '$PROVIDER'${NC}" >&2
            echo -e "${YELLOW}Supported providers: groq, openrouter, cohere${NC}" >&2
            echo -e "${YELLOW}Check your .commitgen.yml file${NC}" >&2
            error_exit "Unsupported provider: '$PROVIDER'"
            ;;
    esac
    
    if [[ -z "$API_KEY" ]]; then
        echo -e "${RED}Error: API key not found for provider '$PROVIDER'${NC}" >&2
        echo -e "${YELLOW}Please set ${PROVIDER^^}_API_KEY in your .env file${NC}" >&2
        error_exit "API key not found for provider $PROVIDER. Check your .env file."
    fi
    
    log "API config set: URL=$API_URL, Key length=${#API_KEY}"
}

# Build prompt
build_prompt() {
    local diff="$1"
    local types="feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
    
    cat << EOF
Generate a conventional commit message under $MAX_CHARS characters for the following git diff.

Use one of these types: $types

If applicable, include a scope in parentheses after the type.

Format: type(scope): description

Be concise and descriptive. Focus on WHAT changed, not HOW.

Git diff:
$diff

Respond with ONLY the commit message, no explanations or additional text.
EOF
}

# Call AI API
call_ai_api() {
    local prompt="$1"
    local model="$2"
    local response
    
    log "Calling $PROVIDER API with model $model"
    
    case "$PROVIDER" in
        "groq"|"openrouter")
            response=$(curl -s -X POST "$API_URL" \
                -H "$AUTH_HEADER" \
                -H "Content-Type: application/json" \
                -d "{
                    \"model\": \"$model\",
                    \"messages\": [{\"role\": \"user\", \"content\": $(echo "$prompt" | jq -R -s .)}],
                    \"max_tokens\": 100,
                    \"temperature\": 0.3
                }")
            ;;
        "cohere")
            response=$(curl -s -X POST "$API_URL" \
                -H "$AUTH_HEADER" \
                -H "Content-Type: application/json" \
                -d "{
                    \"model\": \"$model\",
                    \"message\": $(echo "$prompt" | jq -R -s .),
                    \"max_tokens\": 100,
                    \"temperature\": 0.3
                }")
            ;;
    esac
    
    if [[ $? -ne 0 ]]; then
        error_exit "Failed to call API"
    fi
    
    log "API response: $response"
    echo "$response"
}

# Extract message from API response
extract_message() {
    local response="$1"
    local message
    
    case "$PROVIDER" in
        "groq"|"openrouter")
            message=$(echo "$response" | jq -r '.choices[0].message.content // empty' 2>/dev/null)
            ;;
        "cohere")
            message=$(echo "$response" | jq -r '.text // empty' 2>/dev/null)
            ;;
    esac
    
    if [[ -z "$message" || "$message" == "null" ]]; then
        log "Failed to extract message from response: $response"
        echo "chore: update files"
    else
        # Clean up the message
        message=$(echo "$message" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | head -n1)
        echo "$message"
    fi
}

# Truncate diff if too large
truncate_diff() {
    local diff="$1"
    local diff_size=${#diff}
    
    if [[ $diff_size -gt $MAX_DIFF_SIZE ]]; then
        log "Diff size ($diff_size) exceeds limit ($MAX_DIFF_SIZE), truncating"
        echo "${diff:0:$MAX_DIFF_SIZE}... [truncated]"
    else
        echo "$diff"
    fi
}

# Main function
main() {
    local commit_msg_file="$1"
    
    log "Starting AI commit message generation"
    echo -e "${BLUE}ðŸ¤– Generating AI commit message...${NC}"
    
    # Load configuration
    load_env
    parse_config
    echo -e "${GREEN}âœ… Configuration loaded: provider=${PROVIDER}${NC}"
    get_api_config
    
    # Get staged changes
    local diff
    diff=$(git diff --cached)
    
    if [[ -z "$diff" ]]; then
        log "No staged changes found"
        exit 0
    fi
    
    # Truncate diff if necessary
    diff=$(truncate_diff "$diff")
    
    # Build prompt and get model
    local prompt
    local model
    prompt=$(build_prompt "$diff")
    model=$(get_model)
    
    # Call AI API with retries
    local response
    local message
    local retries=0
    local max_retries=3
    
    while [[ $retries -lt $max_retries ]]; do
        response=$(call_ai_api "$prompt" "$model")
        message=$(extract_message "$response")
        
        if [[ -n "$message" && "$message" != "chore: update files" ]]; then
            break
        fi
        
        retries=$((retries + 1))
        log "Retry $retries/$max_retries"
        sleep 1
    done
    
    # Write commit message
    echo "$message" > "$commit_msg_file"

    # Prevent Git from opening an editor by setting GIT_EDITOR to 'true'
    export GIT_EDITOR="true"  # 'true' command does nothing and exits successfully    
    log "Generated commit message: $message"
    echo -e "${GREEN}âœ… AI-generated commit message: ${BLUE}$message${NC}"
}

# Check dependencies
check_dependencies() {
    if ! command -v jq &> /dev/null; then
        error_exit "jq is required but not installed. Please install jq first."
    fi

    if ! command -v curl &> /dev/null; then
        error_exit "curl is required but not installed. Please install curl first."
    fi
}

# Run main function
check_dependencies
main "$@"
